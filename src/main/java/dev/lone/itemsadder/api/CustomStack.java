package dev.lone.itemsadder.api;

import org.bukkit.Location;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.inventory.ItemStack;
import org.jetbrains.annotations.Nullable;

import java.util.List;

public class CustomStack
{
    /**
     * Returns null if the provided {@ItemStack} is not a custom item created with ItemsAdder
     *
     * @param itemStack
     * @return
     */
    @Nullable
    public static CustomStack byItemStack(ItemStack itemStack)
    {
        throw new NotActuallyItemsAdderException();
    }

    /**
     * Gets a clone of the custom stack declared in ItemsAdder registry.
     * You can give this to a player and do whatever you want without overwriting the original item.
     *
     * @param namespacedID
     * @return
     */
    @Nullable
    public static CustomStack getInstance(String namespacedID)
    {
        throw new NotActuallyItemsAdderException();
    }

    public ItemStack getItemStack()
    {
        throw new NotActuallyItemsAdderException();
    }

    public String getNamespace()
    {
        throw new NotActuallyItemsAdderException();
    }

    public String getId()
    {
        throw new NotActuallyItemsAdderException();
    }

    public String getNamespacedID()
    {
        throw new NotActuallyItemsAdderException();
    }

    public String getModelPath()
    {
        throw new NotActuallyItemsAdderException();
    }

    public String getConfigPath()
    {
        throw new NotActuallyItemsAdderException();
    }

    public FileConfiguration getConfig()
    {
        throw new NotActuallyItemsAdderException();
    }

    public String getPermission()
    {
        throw new NotActuallyItemsAdderException();
    }

    public boolean hasPermission()
    {
        throw new NotActuallyItemsAdderException();
    }

    public boolean matchNamespacedID(CustomStack other)
    {
        throw new NotActuallyItemsAdderException();
    }

    public boolean hasAutoGeneratedModel()
    {
        throw new NotActuallyItemsAdderException();
    }

    public List<String> getTextures()
    {
        throw new NotActuallyItemsAdderException();
    }

    public boolean isBlockAllEnchants()
    {
        throw new NotActuallyItemsAdderException();
    }

    public long getCooldownEventsMs()
    {
        throw new NotActuallyItemsAdderException();
    }

    public boolean hasEventsCooldown()
    {
        throw new NotActuallyItemsAdderException();
    }

    public boolean hasUsagesAttribute()
    {
        throw new NotActuallyItemsAdderException();
    }

    public void setUsages(int amount)
    {
        throw new NotActuallyItemsAdderException();
    }

    public void reduceUsages(int amount)
    {
        throw new NotActuallyItemsAdderException();
    }

    public Integer getUsages(int amount)
    {
        throw new NotActuallyItemsAdderException();
    }

    public boolean hasCustomDurability()
    {
        throw new NotActuallyItemsAdderException();
    }

    public Integer getDurability()
    {
        throw new NotActuallyItemsAdderException();
    }

    public void setDurability(int durability)
    {
        throw new NotActuallyItemsAdderException();
    }

    public int getMaxDurability()
    {
        throw new NotActuallyItemsAdderException();
    }

    /**
     * Complete list here: https://minecraft.gamepedia.com/Attribute#Attributes
     * The slot can be mainhand, offhand, head, chest, legs or feet.
     * <p>
     * <p>
     * Example: item.setAttributeModifier("attack_damage", "mainhand", 10d);
     *
     * @param attributeModifier
     * @param slotStr
     * @param value
     */
    public void setAttributeModifier(String attributeModifier, String slotStr, double value)
    {
        throw new NotActuallyItemsAdderException();
    }

    public void setDisplayName(String displayName)
    {
        throw new NotActuallyItemsAdderException();
    }

    public String getDisplayName()
    {
        throw new NotActuallyItemsAdderException();
    }

    public double getDamageMainhand()
    {
        throw new NotActuallyItemsAdderException();
    }

    /**
     * Use this if you change attack damage of the item (via enchant or attribute modifier)
     *
     * @param slot
     */
    public void updateAttackDamageLore(String slot)
    {
        throw new NotActuallyItemsAdderException();
    }

    /**
     * Use this if you change attack speed of the item
     *
     * @param slot
     */
    public void updateAttackSpeedLore(String slot)
    {
        throw new NotActuallyItemsAdderException();
    }

    public boolean isBlock()
    {
        throw new NotActuallyItemsAdderException();
    }

    public boolean drop(Location loc)
    {
        throw new NotActuallyItemsAdderException();
    }
}
